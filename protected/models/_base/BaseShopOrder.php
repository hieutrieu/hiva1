<?php

/**
 * This is the model base class for the table "shop_order".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ShopOrder".
 *
 * Columns in table "shop_order" available as properties of the model,
 * followed by relations of table "shop_order" available as properties of the model.
 *
 * @property integer $id
 * @property integer $customer_id
 * @property integer $delivery_address_id
 * @property integer $billing_address_id
 * @property integer $ordering_date
 * @property integer $ordering_done
 * @property integer $ordering_confirmed
 * @property integer $payment_method
 * @property integer $shipping_method
 * @property integer $total_product
 * @property double $total_price
 * @property string $comment
 *
 * @property ShopCustomer $customer
 */
abstract class BaseShopOrder extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'shop_order';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'ShopOrder|ShopOrders', $n);
	}

	public static function representingColumn() {
		return 'comment';
	}

	public function rules() {
		return array(
			array('customer_id, delivery_address_id, billing_address_id, ordering_date, payment_method, shipping_method', 'required'),
			array('customer_id, delivery_address_id, billing_address_id, ordering_date, ordering_done, ordering_confirmed, payment_method, shipping_method, total_product', 'numerical', 'integerOnly'=>true),
			array('total_price', 'numerical'),
			array('comment', 'safe'),
			array('ordering_done, ordering_confirmed, total_product, total_price, comment', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, customer_id, delivery_address_id, billing_address_id, ordering_date, ordering_done, ordering_confirmed, payment_method, shipping_method, total_product, total_price, comment', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'customer' => array(self::BELONGS_TO, 'ShopCustomer', 'customer_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'customer_id' => null,
			'delivery_address_id' => Yii::t('app', 'Delivery Address'),
			'billing_address_id' => Yii::t('app', 'Billing Address'),
			'ordering_date' => Yii::t('app', 'Ordering Date'),
			'ordering_done' => Yii::t('app', 'Ordering Done'),
			'ordering_confirmed' => Yii::t('app', 'Ordering Confirmed'),
			'payment_method' => Yii::t('app', 'Payment Method'),
			'shipping_method' => Yii::t('app', 'Shipping Method'),
			'total_product' => Yii::t('app', 'Total Product'),
			'total_price' => Yii::t('app', 'Total Price'),
			'comment' => Yii::t('app', 'Comment'),
			'customer' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('customer_id', $this->customer_id);
		$criteria->compare('delivery_address_id', $this->delivery_address_id);
		$criteria->compare('billing_address_id', $this->billing_address_id);
		$criteria->compare('ordering_date', $this->ordering_date);
		$criteria->compare('ordering_done', $this->ordering_done);
		$criteria->compare('ordering_confirmed', $this->ordering_confirmed);
		$criteria->compare('payment_method', $this->payment_method);
		$criteria->compare('shipping_method', $this->shipping_method);
		$criteria->compare('total_product', $this->total_product);
		$criteria->compare('total_price', $this->total_price);
		$criteria->compare('comment', $this->comment, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}